<?xml version="1.0"?>
<!-- File description
  For executing more complex trajectories the interpolated position mode with
  ros_control offers a very powerful, yet effective command interface.
  It offers a FollowJointTrajectory interface as well as multiple services
  for handling the robot.
 -->
<launch>
  <arg name="pcan_device" default="/dev/pcanusb1" />
  <arg name="trajectory_controller_name" default="pos_based_pos_traj_controller" />

  <include file="$(find schunk_canopen_driver)/launch/driver.launch">
    <arg name="pcan_device" value="$(arg pcan_device)" />
    <arg name="with_ros_control" value="True" />
    <arg name="do_autostart" value="True" />
    <arg name="controller_name" value="$(arg trajectory_controller_name)" />
<!--     <arg name="debug" value="true" /> -->
  </include>

  <!-- robot model -->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find schunk_description)/urdf/lwa4p/arm.urdf.xacro'" />

  <!-- Load controller settings -->
  <rosparam file="$(find schunk_canopen_driver)/config/arm_controllers.yaml" command="load"/>

  <!-- spawn controller manager -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="$(arg trajectory_controller_name)" />

  <!-- load other controller -->
  <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
    output="screen" args="load joint_state_controller" />

  <!--   Convert joint states to /tf tranforms -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

</launch>
